#include "C3DEServiceAdsManager.h"
#include <algorithm>

#include "SponsorPay/C3DESponsorPayManager.h"

#include "C3DEConsole.h"
#include <memory>

#include "C3DEThread.h"

#include "DebugMemory.h"

C3DEServiceAdsManager::C3DEServiceAdsManager()
    : m_showingAd(false)
	, m_offersInitializationRequested(false)
	, m_fakeVideoOfferRequested(false)
    , m_usingFakeAds(false)
    , m_applicationID("")
    , m_userID("")
    , m_securityToken("")
{

}

C3DEServiceAdsManager::~C3DEServiceAdsManager()
{
    
}

bool C3DEServiceAdsManager::InitializeAdOfferings(const std::string& appID, const std::string& appSecret, const std::string& userID)
{
	m_offersInitializationRequested = true;

    if (m_usingFakeAds)
    {
        return true;
    }

#ifdef ADS_SPONSOR_PAY
#if defined(PLATFORM_IPHONE)
    [NSHTTPCookieStorage sharedHTTPCookieStorage].cookieAcceptPolicy = NSHTTPCookieAcceptPolicyAlways;
    
    m_applicationID = applicationID;
    m_securityToken = securityToken;
    
    NSString *applicationIDStr = [NSString stringWithUTF8String:applicationID.c_str()];
    NSString *securityTokenStr = [NSString stringWithUTF8String:securityToken.c_str()];
    
    m_userID = userID;

    if (userID.empty())
    {
        NSString *userID = [SponsorPaySDK startWithAutogeneratedUserForAppId:applicationIDStr securityToken:securityTokenStr];
            
        m_userID = [userID UTF8String];
    }
    else
    {
        NSString *userIDStr = [NSString stringWithUTF8String:userID.c_str()];
        [SponsorPaySDK startForAppId:applicationIDStr userId:userIDStr securityToken:securityTokenStr];
        [SponsorPaySDK setShowPayoffNotificationOnVirtualCoinsReceived:false];
    }
    
    
#elif defined(PLATFORM_ANDROID)
    C3DESystemManager::GetInstance()->GetAndroidEngine()->InitializeSponsorPay(applicationID, securityToken);
#endif
    
    m_initialized = true;

    return true;
#else 
    return false;
#endif

}

bool C3DEServiceAdsManager::HasVideoOffer() const
{
    if (m_usingFakeAds)
    {
        return m_fakeVideoOfferRequested;
    }
	
#ifdef ADS_SPONSOR_PAY
#if defined(PLATFORM_IPHONE)
    C3DESponsorPaySingleton *sharedManager = [C3DESponsorPaySingleton sharedManager];
    return [sharedManager hasVideoOffer];
#elif defined(PLATFORM_ANDROID)
    return false;
#endif
#else
    return false;
#endif	
}

bool C3DEServiceAdsManager::GetIsAdOfferInitialized() const
{
    if (m_usingFakeAds)
    {
        return m_offersInitializationRequested;    
    }

    return m_initialized;
}

void C3DEServiceAdsManager::RequestVirtualCurrenciesEarned(const std::string& group, const std::shared_ptr<C3DEServiceAdsManagerCallback::TypeVirtualCurrenciesCallback>& callback)
{
#ifdef ADS_SPONSOR_PAY
#if defined(PLATFORM_IPHONE)
    [SponsorPaySDK setShowPayoffNotificationOnVirtualCoinsReceived:false];
    C3DESponsorPaySingleton *sharedManager = [C3DESponsorPaySingleton sharedManager];
    [sharedManager requestDeltaOfCoins:callback];
#elif defined(PLATFORM_ANDROID)
    
#endif
#endif
}

void C3DEServiceAdsManager::CheckForVideoOffers(const std::shared_ptr<C3DEServiceAdsManagerCallback::TypeVideoOfferCallback>& callback)
{
    if (m_usingFakeAds)
    {
        C3DEThread thread([&, callback]()
        {
            int milliseconds = 5000.0f;
            std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));

            m_fakeVideoOfferRequested = true;

            (*callback)(true, true);
        });
        return;
    }
	
#ifdef ADS_SPONSOR_PAY
#if defined(PLATFORM_IPHONE)
    C3DESponsorPaySingleton *sharedManager = [C3DESponsorPaySingleton sharedManager];
    [sharedManager requestVideoOffers:callback];
    
#elif defined(PLATFORM_ANDROID)
    C3DESystemManager::GetInstance()->GetAndroidEngine()->CheckForVideoOffers(callback);
#endif
#endif
}

bool C3DEServiceAdsManager::PlayOfferedVideo(const std::string& group, const std::shared_ptr<C3DEServiceAdsManagerCallback::TypeVideoFinishedCallback>& callback)
{
    if (m_usingFakeAds)
    {
        m_fakeVideoOfferRequested = false;
        (*callback)(true, true);
        m_showingAd = false;
        return true;
    }
    
#ifdef ADS_SPONSOR_PAY
#if defined(PLATFORM_IPHONE)
    UIViewController * viewController = C3DEWrapper::GetInstance()->GetViewController();
    
    C3DESponsorPaySingleton *sharedManager = [C3DESponsorPaySingleton sharedManager];
    [sharedManager playOfferedVideo:viewController callback:callback];
#elif defined(PLATFORM_ANDROID)
    
#endif

#else
    return false;
#endif
}

bool C3DEServiceAdsManager::IsShowingAd() const
{
    return m_showingAd;
}
